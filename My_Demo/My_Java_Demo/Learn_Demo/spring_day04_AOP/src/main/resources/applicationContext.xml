<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="accountService" class="com.fff.service.impl.AccountServiceImpl"></bean>

    <!--spring的AOP配置-->
    <!--1，把通知 bean 也交给spring来处理-->
    <bean id="logger" class="com.fff.util.Logger"></bean>
    <!--2，配置AOP-->
    <aop:config >
        <!--3，使用 aop:aspect标签 表明配置切面-->
        <!-- id 给切面提供唯一的ID  ref 指定通知类bean的id -->
        <aop:aspect id="logAdvice" ref="logger">
            <!--4，在aop:config 内部， 使用对应的标签来配置通知的类型-->
            <!--让printLog方法在切入点方法执行之前，进行前置通知-->
            <!--aop:before method属性，用于指定logger类中哪个方法是前置的通知-->
            <!--5，pointcut属性，用于指定切入点表达式，该表达式的含义是指对业务层 哪些方法 增强-->
            <!--
                切入表达式的写法：
                    关键字：execution 表达式
                    表达式：访问修饰符 返回值 包名.包名.包名.包名.....包名.类名.方法名.(参数列表)
                    public void com.fff.service.impl.AccountServiceImpl.insertAccountService();
                    全通配的写法 * *..*.*(..)
                    包名和类名可以省略   * insertAccountService(..)      * *(..)

                    访问修饰符可以省略，返回值可以使用通配符
                    包名可以使用通配符表示任意包，但是有几级包，就需要写几个 *.
                           * *.*.*.*.AccountServiceImpl.insertAccountService();
                    包名可以使用..表示当前包及其子包
                        * *..AccountServiceImpl.insertAccountService();
                    类名和方法名，都可以使用通配符来表示通配。

                    参数列表，可以直接写数据类型
                        基本类型直接写名称 int
                        引用类型 写包名，类名 java.lang.String
                    可以使用通配型表示任意参数，但是必须有参数
                    可以使用..表示有无参数均可以，有参数可以是任意类型

                    实际开发中，切入业务层实现类下的所有方法
                        * com.fff.service.impl.*.*(..)
                        * com.fff.service.impl.save*(..)
                        * com.fff.service.impl..*(..)

            -->
            
            <aop:before method="printLog" pointcut="execution(* *..*.*(..))"></aop:before>

            <aop:after-returning method="printLog" pointcut-ref="pointcut1"></aop:after-returning>

            <aop:pointcut id="pointcut1" expression="execution(* com.fff.service.impl..*(..))"></aop:pointcut>
        </aop:aspect>
    </aop:config>

</beans>